name: Resume

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  RELEASE_APP_ID: 795363
  RELEASE_APP_PRIVATE_KEY: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
  PJ_GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.RELEASE_APP_ID }}
          private-key: ${{ env.RELEASE_APP_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: "17"
      - run: |
          sudo apt-get update
          sudo apt-get install -y \
          libasound2t64 libasound2-dev libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
          libexpat1 libfontconfig1 libgcc1 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
          libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
          libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
          fonts-liberation libayatana-appindicator3-1 libnss3 lsb-release xdg-utils wget pdftk chromium-browser
      - run: npm install
      - run: |
          mkdir -p generated
          check_pdf_generation() {
            local pdf_file="$1"
            if [ ! -f "$pdf_file" ] || ! pdftk "$pdf_file" dump_data > /dev/null 2>&1; then
              echo "Error: PDF generation failed or produced invalid PDF: $pdf_file"
              return 1
            fi
            echo "Successfully generated and validated: $pdf_file"
          }
          export PUPPETEER_ARGS="--no-sandbox --disable-setuid-sandbox"
          export PUPPETEER_LAUNCH_ARGS="--no-sandbox --disable-setuid-sandbox"
          export PUPPETEER_EXECUTABLE_PATH="/usr/bin/chromium-browser"

          echo "Current directory contents before generation:"
          ls -la generated/resume/

          npm run generate:en
          check_pdf_generation "generated/resume/HiromiShikata-FullStack-Engineer-and-Manager.resume.en.pdf"
          npm run generate:ja
          check_pdf_generation "generated/resume/HiromiShikata-FullStack-Engineer-and-Manager.resume.ja.pdf"
          sed 's@志方\|シカタ\|裕美\|ヒロミ@*****@g' generated/resume.full.ja.yaml > generated/resume.full.ja.masked.yaml
          npm run generate:resume --file=resume.full.ja.masked",

          echo "Current directory contents after generation:"
          ls -la generated

          for html_file in generated/*.html; do
            sed -i '/<head>/a \  <!-- Google tag (gtag.js) -->\n  <script async src="https://www.googletagmanager.com/gtag/js?id=${{ secrets.GTAG_ID }}"></script>\n  <script>\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('\''js'\'', new Date());\n    gtag('\''config'\'', '\''${{ secrets.GTAG_ID }}'\'');\n  </script>' "$html_file"
          done
          npm run format

          echo "Git status:"
          git status



          echo "Adding generated files to git:"
          git add generated/
          git status

      - run: git config --global user.email "gh-actions"
      - run: git config --global user.name "gh-actions"

      - if: github.ref == 'refs/heads/main'
        run: |
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "autogen: release"
            git push --force origin main
          fi

      - run: |
          if [ $(pdftk generated/resume/HiromiShikata.resume.short.pdf dump_data | grep NumberOfPages | awk '{print $2}') -ne 1 ]; then
            echo "Resume must be exactly 1 page"
            exit 1
          fi
